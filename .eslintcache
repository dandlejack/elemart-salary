[{"D:\\Work\\elemart-salary\\src\\index.tsx":"1","D:\\Work\\elemart-salary\\src\\reportWebVitals.ts":"2","D:\\Work\\elemart-salary\\src\\App.tsx":"3","D:\\Work\\elemart-salary\\src\\utils\\RouterPath.ts":"4","D:\\Work\\elemart-salary\\src\\components\\SiderComponent.tsx":"5","D:\\Work\\elemart-salary\\src\\pages\\EmployeePage\\EmployeePage.tsx":"6","D:\\Work\\elemart-salary\\src\\pages\\DashboardPage\\DashboardPage.tsx":"7","D:\\Work\\elemart-salary\\src\\pages\\SalaryListPage\\SaralyListPage.tsx":"8","D:\\Work\\elemart-salary\\src\\components\\HeaderComponent.tsx":"9","D:\\Work\\elemart-salary\\src\\components\\AddEmployeeForm\\AddEmployeeForm.tsx":"10","D:\\Work\\elemart-salary\\src\\components\\CustomModal\\CustomModal.tsx":"11","D:\\Work\\elemart-salary\\src\\api\\EmployeeApi.ts":"12","D:\\Work\\elemart-salary\\src\\config.ts":"13","D:\\Work\\elemart-salary\\src\\mockData\\mockColumnTable.tsx":"14","D:\\Work\\elemart-salary\\src\\pages\\EmployeeInfo\\EmployeeInfoPage.tsx":"15","D:\\Work\\elemart-salary\\src\\components\\AddSalaryForm\\AddSalaryForm.tsx":"16","D:\\Work\\elemart-salary\\src\\components\\EditTable\\EditableTable.tsx":"17","D:\\Work\\elemart-salary\\src\\components\\EditTable\\EditableCell.tsx":"18","D:\\Work\\elemart-salary\\src\\api\\ReportApi.ts":"19","D:\\Work\\elemart-salary\\src\\utils\\AddComma.ts":"20","D:\\Work\\elemart-salary\\src\\pages\\SalaryListInfoPage\\SalaryInfoPage.tsx":"21","D:\\Work\\elemart-salary\\src\\components\\generatePDF\\generatePDF.tsx":"22","D:\\Work\\elemart-salary\\src\\components\\GeneratePDF\\GeneratePDF.tsx":"23"},{"size":638,"mtime":1620526783345,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":499162500000,"results":"26","hashOfConfig":"25"},{"size":946,"mtime":1621237066584,"results":"27","hashOfConfig":"25"},{"size":1200,"mtime":1620525336514,"results":"28","hashOfConfig":"25"},{"size":1309,"mtime":1620481734344,"results":"29","hashOfConfig":"25"},{"size":1028,"mtime":1621237117181,"results":"30","hashOfConfig":"25"},{"size":228,"mtime":1620204122698,"results":"31","hashOfConfig":"25"},{"size":989,"mtime":1621237101646,"results":"32","hashOfConfig":"25"},{"size":975,"mtime":1621237078098,"results":"33","hashOfConfig":"25"},{"size":1692,"mtime":1621222490128,"results":"34","hashOfConfig":"25"},{"size":388,"mtime":1620561632103,"results":"35","hashOfConfig":"25"},{"size":1138,"mtime":1620995890313,"results":"36","hashOfConfig":"25"},{"size":88,"mtime":1620283365245,"results":"37","hashOfConfig":"25"},{"size":5645,"mtime":1621224787650,"results":"38","hashOfConfig":"25"},{"size":12901,"mtime":1621237281790,"results":"39","hashOfConfig":"25"},{"size":4575,"mtime":1621235663191,"results":"40","hashOfConfig":"25"},{"size":4900,"mtime":1621235784914,"results":"41","hashOfConfig":"25"},{"size":6713,"mtime":1621222368830,"results":"42","hashOfConfig":"25"},{"size":1296,"mtime":1620563936845,"results":"43","hashOfConfig":"25"},{"size":582,"mtime":1620985760514,"results":"44","hashOfConfig":"25"},{"size":1050,"mtime":1620561808206,"results":"45","hashOfConfig":"25"},{"size":1817,"mtime":1620562736357,"results":"46","hashOfConfig":"25"},{"size":1786,"mtime":1620985063000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1o16w34",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},"D:\\Work\\elemart-salary\\src\\index.tsx",[],["104","105"],"D:\\Work\\elemart-salary\\src\\reportWebVitals.ts",[],"D:\\Work\\elemart-salary\\src\\App.tsx",["106","107","108","109"],"D:\\Work\\elemart-salary\\src\\utils\\RouterPath.ts",[],"D:\\Work\\elemart-salary\\src\\components\\SiderComponent.tsx",["110","111","112","113"],"import React, { useEffect, useState } from 'react'\r\nimport { Layout, Menu, PageHeader } from \"antd\";\r\nimport { RoutePath } from '../utils/RouterPath'\r\nimport { Page } from '../types/Page';\r\nimport { useHistory } from 'react-router-dom'\r\nconst { SubMenu } = Menu;\r\nconst { Content, Sider, Header } = Layout\r\n\r\nexport const SiderComponent: React.FC = () => {\r\n    const [activePage, setActivePage] = useState(RoutePath[0].pathName);\r\n    const history = useHistory()\r\n    const navigatePage = (e: any, page: any) => {\r\n        history.push(page.path)\r\n        setActivePage(page.pathName);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Sider theme=\"light\" className='siderHeader'>\r\n                <PageHeader title=\"ELEMART\"  style={{height:72,borderBottom:'2px solid #e7e7e7'}} />\r\n                <Menu\r\n                    mode=\"inline\"\r\n                    activeKey={activePage}\r\n                    defaultSelectedKeys={[activePage]}\r\n                    style={{ borderRight: 0 }}\r\n                >\r\n                    {RoutePath.map((page: Page) => {\r\n                        return page.isMenu ? <Menu.Item key={page.pathName} onClick={e => navigatePage(e, page)}>{page.pathName}</Menu.Item>:<></>\r\n                    })}\r\n                </Menu>\r\n            </Sider>\r\n        </>\r\n    )\r\n}","D:\\Work\\elemart-salary\\src\\pages\\EmployeePage\\EmployeePage.tsx",[],"D:\\Work\\elemart-salary\\src\\pages\\DashboardPage\\DashboardPage.tsx",[],"D:\\Work\\elemart-salary\\src\\pages\\SalaryListPage\\SaralyListPage.tsx",[],"D:\\Work\\elemart-salary\\src\\components\\HeaderComponent.tsx",["114"],"D:\\Work\\elemart-salary\\src\\components\\AddEmployeeForm\\AddEmployeeForm.tsx",["115","116"],"import { useState, useEffect } from 'react'\r\nimport { Button, Input, InputNumber } from 'antd'\r\nimport { EmployeeApi } from '../../api/EmployeeApi'\r\nexport const AddEmployeeForm: React.FC = () => {\r\n    const [firstname, setFirstname] = useState('')\r\n    const [lastname, setLastname] = useState('')\r\n    const [salary, setSalary] = useState(0)\r\n    const [showHaveAccount, setShowHaveAccount] = useState(false)\r\n    const onSave = async () => {\r\n        const employeeForm: any = {\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            current_salary: salary,\r\n            social_security : salary >= 15000 ? 750 : salary * 0.05,\r\n            total_social_security: 0\r\n        }\r\n        await EmployeeApi.addEmployee(employeeForm)\r\n    }\r\n    return <div>\r\n        <div>\r\n            <Input placeholder='ชื่อ' onChange={e => setFirstname(e.target.value)} style={{ width: 720, marginLeft: 15 }} />\r\n        </div>\r\n        <div style={{ marginTop: 15 }}>\r\n            <Input placeholder='สกุล' onChange={e => setLastname(e.target.value)} style={{ width: 720, marginLeft: 15 }} />\r\n        </div>\r\n        <div style={{ marginTop: 15 }}>\r\n            <InputNumber placeholder='เงินเดือน' onChange={(value: number) => setSalary(value)} style={{ width: 720, marginLeft: 15 }} />\r\n        </div>\r\n        <div style={{ margin: '15px auto', textAlign: 'center' }}>\r\n            <Button type='primary' onClick={onSave}>เพิ่มพนักงาน</Button>\r\n        </div>\r\n        {showHaveAccount ? <span style={{ color: 'red' }}>มีชื่อลูกค้ารายนี้แล้ว</span> : null}\r\n    </div>\r\n}","D:\\Work\\elemart-salary\\src\\components\\CustomModal\\CustomModal.tsx",[],"D:\\Work\\elemart-salary\\src\\api\\EmployeeApi.ts",["117","118"],"import { BACKEND_API } from '../config'\r\nimport axios from 'axios'\r\nconst EMPLOYEE_API_URL = `${BACKEND_API}/employees`\r\nexport class EmployeeApi {\r\n    static async addEmployee(data: any) {\r\n        const result = await axios.post(`${EMPLOYEE_API_URL}/addEmployee`,data).then(res=>{\r\n            if(res.data.data === 'successful'){\r\n                window.location.reload()\r\n            }\r\n        })\r\n    }\r\n\r\n    static async findAllEmployees() {\r\n        const result = await axios.get(`${EMPLOYEE_API_URL}/findall`).then(res=>{\r\n            if(res.status === 200) return res.data\r\n        })\r\n        return result\r\n    }\r\n\r\n    static async findEmployeeByEmployeeId(employee_id:string) {\r\n        const result = await axios.get(`${EMPLOYEE_API_URL}/`+employee_id).then(res=>{\r\n            if(res.status === 200) return res.data\r\n        })\r\n        \r\n        return result\r\n    }\r\n\r\n    static async updateEmployeeByEmployeeId(employee_id,data:any){\r\n        const result = await axios.put(`${EMPLOYEE_API_URL}/`+employee_id,data).then(res=>{\r\n            if(res.data === 'successful') window.location.reload()\r\n        })\r\n    }\r\n}","D:\\Work\\elemart-salary\\src\\config.ts",[],"D:\\Work\\elemart-salary\\src\\mockData\\mockColumnTable.tsx",[],"D:\\Work\\elemart-salary\\src\\pages\\EmployeeInfo\\EmployeeInfoPage.tsx",["119","120"],"D:\\Work\\elemart-salary\\src\\components\\AddSalaryForm\\AddSalaryForm.tsx",["121","122","123","124","125","126"],"D:\\Work\\elemart-salary\\src\\components\\EditTable\\EditableTable.tsx",["127","128","129","130","131"],"import { useEffect, useState } from 'react'\r\nimport { Button, Table, Popconfirm } from 'antd'\r\nimport {\r\n    EditableCell,\r\n    EditableRow,\r\n} from './EditableCell';\r\nimport { TablePaginationConfig } from 'antd/lib/table';\r\nimport { EmployeeApi } from '../../api/EmployeeApi';\r\nimport { TableProps } from '../../types/EditTableTypes';\r\n\r\n\r\n\r\nexport const EditableTable: React.FC<TableProps> = props => {\r\n    const [dataSources, setDataSource] = useState(props.oldData)\r\n    const [count, setCount] = useState(props.startCount)\r\n    const [showData, setShowData] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if (props.checkEnter)\r\n            handleAdd()\r\n        return () => {\r\n\r\n        };\r\n    }, [props.checkEnter]);\r\n\r\n    useEffect(() => {\r\n        setDataSource(props.oldData)\r\n    }, [props.oldData]);\r\n\r\n    useEffect(() => {\r\n        setShowData(props.showData)\r\n    }, [props.showData]);\r\n\r\n    useEffect(() => {\r\n        dataSources.map((data: any, index: number) => {\r\n            data.key = index + 1\r\n            handleOperation(data);\r\n            return data;\r\n        });\r\n        if (props.getData !== undefined) props.getData(dataSources)\r\n    }, [dataSources])\r\n\r\n    const handleOperation = (data: any) => {\r\n        data.operation = (\r\n            <Popconfirm\r\n                title=\"Sure to delete?\"\r\n                onConfirm={() => handleDelete(data.key)}\r\n            >\r\n                <a style={{ color: 'red' }}>Delete</a>\r\n            </Popconfirm>\r\n        );\r\n        return data.operation\r\n    };\r\n\r\n    const handleDelete = (key: number) => {\r\n        const filterData = dataSources.filter((item: any) => item.key !== key)\r\n        setDataSource(filterData);\r\n        setCount(count - 1)\r\n    };\r\n\r\n    const handleSave = (row: any) => {\r\n        row.social_security = row.salary >= 15000 ? 750 : row.salary * 0.05\r\n\r\n        const newData = [...dataSources];\r\n        const index = newData.findIndex((item: any) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n            ...item,\r\n            ...row,\r\n        });\r\n        setDataSource(newData);\r\n    };\r\n\r\n    const components = {\r\n        body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n        },\r\n    };\r\n\r\n    const mapColumns = (col: any) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n        const newCol = {\r\n            ...col,\r\n            onCell: (record: any) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                children: col.children,\r\n                dataType: col.dataType,\r\n                formType: props.formType,\r\n                handleSave,\r\n            }),\r\n        };\r\n        if (col.children) {\r\n            newCol.children = col.children.map(mapColumns);\r\n        }\r\n        return newCol;\r\n    };\r\n    const canEditChildColumns = props.column.map(mapColumns);\r\n    const handleAdd = () => {\r\n        const storeData = {};\r\n\r\n        props.column.forEach((data: any) => {\r\n            if (data.children) {\r\n                data.children.forEach((insideChildren: any) => {\r\n                    if (insideChildren.dataType === 'number') {\r\n                        Object.assign(storeData, { [insideChildren.dataIndex]: 0 });\r\n                    } else {\r\n                        Object.assign(storeData, { [insideChildren.dataIndex]: '-' });\r\n                    }\r\n                });\r\n            } else {\r\n                if (data.dataType === 'number') {\r\n                    Object.assign(storeData, { [data.dataIndex]: 0 });\r\n                } else if (data.dataType === 'action') {\r\n                    Object.assign(storeData, { [data.dataIndex]: handleOperation(data) })\r\n                } else {\r\n                    Object.assign(storeData, { [data.dataIndex]: '-' });\r\n                    Object.assign(storeData, { key: count });\r\n                    Object.assign(storeData, { no: count });\r\n                }\r\n            }\r\n        });\r\n\r\n        const newData = {\r\n            // key: count,\r\n            ...storeData,\r\n        };\r\n        setCount(count + 1);\r\n        setDataSource([...dataSources, newData]);\r\n    }\r\n\r\n    const AddBtn = () => {\r\n        return (<>\r\n            <Button onClick={handleAdd} style={{ marginBottom: 15 }} type='primary' >\r\n                Add row\r\n            </Button>\r\n        </>\r\n        );\r\n    };\r\n    return <div>\r\n        <Table\r\n            columns={canEditChildColumns}\r\n            dataSource={dataSources}\r\n            components={components}\r\n            bordered\r\n            style={{ width: '100%' }}\r\n            // pagination={props.ablePagination}\r\n            pagination={{ pageSize: showData }}\r\n            scroll={{ x: '100vw', y: '100%' }}\r\n\r\n        />\r\n        <AddBtn />\r\n\r\n    </div>\r\n}","D:\\Work\\elemart-salary\\src\\components\\EditTable\\EditableCell.tsx",["132","133"],"import React, { useContext, useState, useEffect, createRef } from 'react';\r\nimport { Select, TimePicker, Form, DatePicker, Radio, Input, InputNumber } from 'antd';\r\nimport moment from 'moment';\r\nimport TH_LOCAL from 'antd/es/date-picker/locale/th_TH';\r\nimport { EmployeeApi } from '../../api/EmployeeApi';\r\nimport { EditableRowProps, EditableCellProps } from '../../types/EditTableTypes';\r\n\r\n\r\n\r\nconst EditableContext = React.createContext<any>(null);\r\n\r\nexport const EditableRow: React.FC<EditableRowProps> = ({\r\n  index,\r\n  ...props\r\n}) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\nexport const EditableCell: React.FC<EditableCellProps> = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  dataType,\r\n  tableType,\r\n  record,\r\n  formType,\r\n  handleSave,\r\n  handleDelete,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [employeeData, setEmployeeData] = useState([] as Array<Object>)\r\n  const inputRef = createRef<Input>();\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  useEffect(() => {\r\n    if (dataIndex === 'fullname') {\r\n      EmployeeApi.findAllEmployees().then(res => {\r\n        setEmployeeData(res)\r\n      })\r\n    }\r\n  }, []);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    if (record[dataIndex] !== '-') {\r\n      if (dataType === 'date') {\r\n        form.setFieldsValue({\r\n          [dataIndex]: moment(record[dataIndex], 'DD/MM/YYYY'),\r\n        });\r\n      } else if (dataType === 'date_time') {\r\n        form.setFieldsValue({\r\n          [dataIndex]: moment(record[dataIndex], 'DD/MM/YYYY HH:mm'),\r\n        });\r\n      } else if (dataType === 'time') {\r\n        form.setFieldsValue({\r\n          [dataIndex]: moment(record[dataIndex], 'HH:mm'),\r\n        });\r\n      } else {\r\n        form.setFieldsValue({ [dataIndex]: record[dataIndex] });\r\n      }\r\n    }\r\n  };\r\n\r\n  const save = async (e: any) => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      // const result:any = employeeData.filter((data:any)=>data.fullname===values.fullname) \r\n      // Object.assign(values,{salary:result[0].current_salary}) // Add current salary of employee      \r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n  if (editable) {\r\n    if (editing) {\r\n      if (dataType === 'radio') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            {dataIndex === 'fruit_size' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"ใหญ่\">ใหญ่</Radio>\r\n                <Radio value=\"กลาง\">กลาง</Radio>\r\n                <Radio value=\"เล็ก\">เล็ก</Radio>\r\n                <Radio value=\"ชิ้น\">ชิ้น</Radio>\r\n              </Radio.Group>\r\n            ) : dataIndex === 'status' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"สด\">สด</Radio>\r\n                <Radio value=\"เปลี่ยนมุ้ง\">เปลี่ยนมุ้ง</Radio>\r\n                <Radio value=\"คลุก\">คลุก</Radio>\r\n                <Radio value=\"อบใหม่\">อบใหม่</Radio>\r\n              </Radio.Group>\r\n            ) : dataIndex === 'soaking_type' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"บ่อแช่\">บ่อแช่</Radio>\r\n                <Radio value=\"ถัง\">ถัง</Radio>\r\n              </Radio.Group>\r\n            ) : dataIndex === 'fruit_path' ? (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"NORMAL\">Normal</Radio>\r\n                <Radio value=\"SOFT\">SOFT</Radio>\r\n                <Radio value=\"FREE SUGAR\">FREE SUGAR</Radio>\r\n                <Radio value=\"FREE SO2\">FREE SO2</Radio>\r\n              </Radio.Group>\r\n            ) : (\r\n              <Radio.Group onChange={save}>\r\n                <Radio value=\"ผ่าน\">ผ่าน</Radio>\r\n                <Radio value=\"ไม่ผ่าน\">ไม่ผ่าน</Radio>\r\n              </Radio.Group>\r\n            )}\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'date') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <DatePicker onBlur={save} format={'DD/MM/YYYY'} locale={TH_LOCAL} />\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'date_time') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <DatePicker\r\n              onBlur={save}\r\n              showTime\r\n              format={'DD/MM/YYYY HH:mm'}\r\n              locale={TH_LOCAL}\r\n            />\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'time') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <TimePicker onBlur={save} />\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'select') {\r\n        childNode = (\r\n          <Form.Item\r\n            style={{ margin: 0 }}\r\n            name={dataIndex}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: `${title} is required.`,\r\n              },\r\n            ]}\r\n          >\r\n            {dataIndex === 'fullname' ? (\r\n              <Select onBlur={save} showSearch>\r\n                {employeeData.length > 0 && employeeData.map((data: any) => {\r\n                  return <Select.Option key={data.employee_id} value={data.fullname}>{data.fullname}</Select.Option>\r\n                })}\r\n              </Select>\r\n            ) : null}\r\n          </Form.Item>\r\n        );\r\n      } else if (dataType === 'number') {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <InputNumber min={0} onPressEnter={save} onBlur={save} />\r\n          </Form.Item>\r\n        );\r\n      } else {\r\n        childNode = (\r\n          <Form.Item style={{ margin: 0 }} name={dataIndex}>\r\n            <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n          </Form.Item>\r\n        );\r\n      }\r\n    } else {\r\n      childNode = (\r\n        <div\r\n          className=\"editable-cell-value-wrap\"\r\n          style={{ paddingRight: 24 }}\r\n          onClick={toggleEdit}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n","D:\\Work\\elemart-salary\\src\\api\\ReportApi.ts",["134"],"import axios from \"axios\";\r\nimport { BACKEND_API } from \"../config\";\r\n\r\n\r\nconst REPORT_API = `${BACKEND_API}/reports`\r\n\r\nexport class ReportApi {\r\n    static async addReport(data: Object) {\r\n        await axios.post(`${REPORT_API}/AddReport`, data).then(res => {\r\n            if (res.status === 201) window.location.reload()\r\n        })\r\n    }\r\n\r\n    static async findAllReports(params: any) {\r\n        const result = await axios.get(`${REPORT_API}/findall`, { params }).then(res => {\r\n            return res.data\r\n        })\r\n        return result\r\n    }\r\n\r\n    static async findSalaryList(params: any) {\r\n        const result = await axios.get(`${REPORT_API}/findSalaryList`, { params }).then(res => {\r\n            if (res.status === 200) return res.data\r\n        })\r\n        return result\r\n    }\r\n    static async findSumLateAndSecuritySocial(params: any) {\r\n        const result = await axios.get(`${REPORT_API}/findTotalSecuritySocialAndLate`, { params }).then(res => {\r\n            if (res.status === 200) return res.data\r\n        })\r\n        return result\r\n    }\r\n    static async deleteReportById(report_id: string) {\r\n        const result = await axios.delete(`${REPORT_API}/${report_id}`).then(res => {\r\n            if (res.status === 200) window.location.reload()\r\n        })\r\n    }\r\n}","D:\\Work\\elemart-salary\\src\\utils\\AddComma.ts",["135"],"import { IReportProps } from \"../types/StoreTypes\";\r\n\r\nexport const AddComma = (data: number) => {\r\n    return data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport const AddCommaOfObject = (data: any) => {\r\n    const keys = Object.keys(data)\r\n    const obj = {} as IReportProps\r\n    keys.map((key: string) => {\r\n        if (typeof (data[key]) !== \"string\" && typeof (data[key]) !== \"object\") {\r\n            const d = data[key].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n            return Object.assign(obj, { [key]: d })\r\n        }\r\n    })\r\n    return obj\r\n}","D:\\Work\\elemart-salary\\src\\pages\\SalaryListInfoPage\\SalaryInfoPage.tsx",["136"],"import { Table } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { createImportSpecifier } from 'typescript'\r\nimport { ReportApi } from '../../api/ReportApi'\r\nimport { HeaderComponent } from '../../components/HeaderComponent'\r\nimport { AddSalaryColumn } from '../../mockData/mockColumnTable'\r\nimport { IReportProps } from '../../types/StoreTypes'\r\n\r\n\r\n\r\nexport const SalaryInfoPage: React.FC<{ match: any }> = ({ match }) => {\r\n    const { id } = match.params\r\n    const [dataSource, setDataSource] = useState([] as Array<IReportProps>);\r\n    useEffect(() => {\r\n        ReportApi.findAllReports({\r\n            filterObject: {\r\n                report_id: id\r\n            }\r\n        }).then(res => {\r\n            console.log(res)\r\n            setDataSource(res[0].attributes)\r\n        })\r\n\r\n        return () => {\r\n        };\r\n    }, [id]);\r\n    return <>\r\n        <HeaderComponent title='Employee Info' nameOfLinkPath='' />\r\n        <Table className='t' columns={AddSalaryColumn} dataSource={dataSource} bordered />\r\n    </>\r\n}","D:\\Work\\elemart-salary\\src\\components\\generatePDF\\generatePDF.tsx",["137","138","139"],"D:\\Work\\elemart-salary\\src\\components\\GeneratePDF\\GeneratePDF.tsx",["140","141"],"import { Button } from \"antd\";\r\nimport { SelectValue } from \"antd/lib/select\";\r\nimport html2canvas from \"html2canvas\";\r\nimport jsPDF from \"jspdf\";\r\nimport { useState } from \"react\";\r\ninterface IProps {\r\n    document: HTMLElement | null\r\n    fullname: string;\r\n    reportMonth: SelectValue\r\n\r\n}\r\nexport const GeneratePDF: React.FC<IProps> = ({ document, fullname, reportMonth }) => {\r\n    const [ready, setReady] = useState(false);\r\n    const printPdf = () => {\r\n        const input = document\r\n        console.log(input)\r\n        if (input !== null) {\r\n            html2canvas(input, { scale:2 }).then(canvas => {\r\n                \r\n                const imgData = canvas.toDataURL('image/png');\r\n                const pdf = new jsPDF('p', 'px', 'a4');\r\n                var pageWidth = pdf.internal.pageSize.getWidth();\r\n                var pageHeight = pdf.internal.pageSize.getHeight();\r\n                const widthRatio = pageWidth / canvas.width;\r\n                const heightRatio = pageHeight / canvas.height;\r\n                const ratio = widthRatio > heightRatio ? heightRatio : widthRatio;\r\n                const canvasWidth = canvas.width * ratio - 50;\r\n                const canvasHeight = canvas.height * ratio;\r\n                const marginX = (pageWidth - canvasWidth) / 2;\r\n                const marginY = 20// 0 if use class page //(pageHeight - canvasHeight) / 2\r\n                pdf.addImage(imgData, 'JPEG', marginX, marginY, canvasWidth, canvasHeight);\r\n                pdf.save(`${fullname + ' ' + reportMonth?.toString().split('/')[0] }.pdf`);\r\n            })\r\n        }\r\n    }\r\n    return <Button onClick={printPdf} type=\"primary\" style={{ backgroundColor: '#1B456B', borderColor: '#1B456B', position: 'absolute', right: 15 }} >PAYROLL Generate</Button>\r\n    \r\n}",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":2,"column":8,"nodeType":"148","messageId":"149","endLine":2,"endColumn":12},{"ruleId":"146","severity":1,"message":"150","line":4,"column":18,"nodeType":"148","messageId":"149","endLine":4,"endColumn":22},{"ruleId":"146","severity":1,"message":"151","line":9,"column":10,"nodeType":"148","messageId":"149","endLine":9,"endColumn":25},{"ruleId":"146","severity":1,"message":"152","line":10,"column":10,"nodeType":"148","messageId":"149","endLine":10,"endColumn":16},{"ruleId":"146","severity":1,"message":"153","line":1,"column":17,"nodeType":"148","messageId":"149","endLine":1,"endColumn":26},{"ruleId":"146","severity":1,"message":"154","line":6,"column":9,"nodeType":"148","messageId":"149","endLine":6,"endColumn":16},{"ruleId":"146","severity":1,"message":"155","line":7,"column":9,"nodeType":"148","messageId":"149","endLine":7,"endColumn":16},{"ruleId":"146","severity":1,"message":"156","line":7,"column":25,"nodeType":"148","messageId":"149","endLine":7,"endColumn":31},{"ruleId":"146","severity":1,"message":"150","line":2,"column":26,"nodeType":"148","messageId":"149","endLine":2,"endColumn":30},{"ruleId":"146","severity":1,"message":"153","line":1,"column":20,"nodeType":"148","messageId":"149","endLine":1,"endColumn":29},{"ruleId":"146","severity":1,"message":"157","line":8,"column":29,"nodeType":"148","messageId":"149","endLine":8,"endColumn":47},{"ruleId":"146","severity":1,"message":"158","line":6,"column":15,"nodeType":"148","messageId":"149","endLine":6,"endColumn":21},{"ruleId":"146","severity":1,"message":"158","line":29,"column":15,"nodeType":"148","messageId":"149","endLine":29,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":87,"column":8,"nodeType":"161","endLine":87,"endColumn":21,"suggestions":"162"},{"ruleId":"163","severity":1,"message":"164","line":179,"column":17,"nodeType":"165","endLine":179,"endColumn":60},{"ruleId":"146","severity":1,"message":"166","line":2,"column":30,"nodeType":"148","messageId":"149","endLine":2,"endColumn":35},{"ruleId":"146","severity":1,"message":"167","line":5,"column":27,"nodeType":"148","messageId":"149","endLine":5,"endColumn":44},{"ruleId":"146","severity":1,"message":"168","line":8,"column":8,"nodeType":"148","messageId":"149","endLine":8,"endColumn":14},{"ruleId":"146","severity":1,"message":"169","line":13,"column":12,"nodeType":"148","messageId":"149","endLine":13,"endColumn":22},{"ruleId":"170","severity":1,"message":"171","line":31,"column":35,"nodeType":"172","messageId":"173","endLine":31,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":96,"column":24,"nodeType":"172","messageId":"173","endLine":96,"endColumn":26},{"ruleId":"146","severity":1,"message":"174","line":7,"column":10,"nodeType":"148","messageId":"149","endLine":7,"endColumn":31},{"ruleId":"146","severity":1,"message":"175","line":8,"column":10,"nodeType":"148","messageId":"149","endLine":8,"endColumn":21},{"ruleId":"159","severity":1,"message":"176","line":24,"column":8,"nodeType":"161","endLine":24,"endColumn":26,"suggestions":"177"},{"ruleId":"159","severity":1,"message":"178","line":41,"column":8,"nodeType":"161","endLine":41,"endColumn":21,"suggestions":"179"},{"ruleId":"180","severity":1,"message":"181","line":49,"column":17,"nodeType":"165","endLine":49,"endColumn":45},{"ruleId":"159","severity":1,"message":"182","line":46,"column":6,"nodeType":"161","endLine":46,"endColumn":15,"suggestions":"183"},{"ruleId":"159","severity":1,"message":"184","line":54,"column":6,"nodeType":"161","endLine":54,"endColumn":8,"suggestions":"185"},{"ruleId":"146","severity":1,"message":"158","line":34,"column":15,"nodeType":"148","messageId":"149","endLine":34,"endColumn":21},{"ruleId":"170","severity":1,"message":"186","line":10,"column":28,"nodeType":"172","messageId":"187","endLine":10,"endColumn":30},{"ruleId":"146","severity":1,"message":"188","line":3,"column":10,"nodeType":"148","messageId":"149","endLine":3,"endColumn":31},{"ruleId":"146","severity":1,"message":"189","line":2,"column":8,"nodeType":"148","messageId":"149","endLine":2,"endColumn":19},{"ruleId":"146","severity":1,"message":"190","line":9,"column":12,"nodeType":"148","messageId":"149","endLine":9,"endColumn":17},{"ruleId":"146","severity":1,"message":"191","line":9,"column":19,"nodeType":"148","messageId":"149","endLine":9,"endColumn":27},{"ruleId":"146","severity":1,"message":"190","line":13,"column":12,"nodeType":"148","messageId":"149","endLine":13,"endColumn":17},{"ruleId":"146","severity":1,"message":"191","line":13,"column":19,"nodeType":"148","messageId":"149","endLine":13,"endColumn":27},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","'HeaderComponent' is defined but never used.","'Footer' is defined but never used.","'useEffect' is defined but never used.","'SubMenu' is assigned a value but never used.","'Content' is assigned a value but never used.","'Header' is assigned a value but never used.","'setShowHaveAccount' is assigned a value but never used.","'result' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dataSource.firstname' and 'dataSource.lastname'. Either include them or remove the dependency array.","ArrayExpression",["194"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Input' is defined but never used.","'salaryMonthColumn' is defined but never used.","'moment' is defined but never used.","'getKeyDown' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'TablePaginationConfig' is defined but never used.","'EmployeeApi' is defined but never used.","React Hook useEffect has a missing dependency: 'handleAdd'. Either include it or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'handleOperation' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["196"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'inputRef'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has a missing dependency: 'dataIndex'. Either include it or remove the dependency array.",["198"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'createImportSpecifier' is defined but never used.","'html2canvas' is defined but never used.","'ready' is assigned a value but never used.","'setReady' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [dataSource.firstname, dataSource.lastname, reportMonth]",{"range":"209","text":"210"},"Update the dependencies array to be: [handleAdd, props.checkEnter]",{"range":"211","text":"212"},"Update the dependencies array to be: [dataSources, handleOperation, props]",{"range":"213","text":"214"},"Update the dependencies array to be: [editing, inputRef]",{"range":"215","text":"216"},"Update the dependencies array to be: [dataIndex]",{"range":"217","text":"218"},[3702,3715],"[dataSource.firstname, dataSource.lastname, reportMonth]",[705,723],"[handleAdd, props.checkEnter]",[1172,1185],"[dataSources, handleOperation, props]",[1279,1288],"[editing, inputRef]",[1456,1458],"[dataIndex]"]